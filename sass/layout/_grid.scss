@use 'sass:math';
@use '../utils/variables' as *;
@use '../utils/mixins' as *;


// base layout classes

.container{
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;  // means to incorporate padding and border in a total width
}

.row{
    display: flex;
    flex-flow: row wrap; // means when contents are more in row  than screen
    // then the content will go to a new row
}


// grid gaps

@each $key, $value in $grid-gaps {

    .gap-#{$key} > * {  // apply gap to any class .col that is child/ descendant

        // ie can be  like
        // <div>
        //      <div class=".col-12-xs .col-5-lg .col-3-xl > </div>
        //</div>

        padding: $value;
    }

    .gap-#{$key} {
         // make content start from  left or right
         margin-left: -$value;
         margin-right: $value;
 
    }
}


// justify content classes
// loop through a list use value do not have key

@each $value in $layout-values {
    .justify-#{$value} {
        justify-content: $value;
    }

}


// col classes these are different classes 
//we will use to distribute content in a row
// for example .col-xs-12, .col-md-12
// so we want to generate 
//these classes for all breakpoints


//  start from here then goes to a mixin definition
// and the content inside mixin will go @content


@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div( $i * 100%, $grid-columns); // ( (100% ) / 12 ) * $i) 
            // calculation follow magazijuto 
            // where by started by division then multiplication
            // $i chnages from 1 - 12
        }
    }

}


@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div( $i * 100%, $grid-columns); // ( (100% ) / 12 ) * $i) 
            // calculation follow magazijuto 
            // where by started by division then multiplication
            // $i chnages from 1 - 12
        }
    }

}


@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div( $i * 100%, $grid-columns); // ( (100% ) / 12 ) * $i) 
            // calculation follow magazijuto 
            // where by started by division then multiplication
            // $i chnages from 1 - 12
        }
    }

}



@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div( $i * 100%, $grid-columns); // ( (100% ) / 12 ) * $i) 
            // calculation follow magazijuto 
            // where by started by division then multiplication
            // $i chnages from 1 - 12
        }
    }

}



@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div( $i * 100%, $grid-columns); // ( (100% ) / 12 ) * $i) 
            // calculation follow magazijuto 
            // where by started by division then multiplication
            // $i chnages from 1 - 12
        }
    }

}
